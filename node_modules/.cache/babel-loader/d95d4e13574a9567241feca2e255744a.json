{"ast":null,"code":"import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    swiper.updateClickedSlide(e);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/AA/OneDrive/Desktop/iconic-web-app/iconic-web-app/node_modules/swiper/core/events/onTouchEnd.js"],"names":["now","nextTick","onTouchEnd","event","swiper","data","touchEventsData","params","touches","rtlTranslate","rtl","slidesGrid","enabled","e","originalEvent","allowTouchCallbacks","emit","isTouched","isMoved","grabCursor","setGrabCursor","startMoving","allowSlideNext","allowSlidePrev","touchEndTime","timeDiff","touchStartTime","allowClick","updateClickedSlide","lastClickTime","destroyed","swipeDirection","diff","currentTranslate","startTranslate","currentPos","followFinger","translate","cssMode","freeMode","stopIndex","groupSize","slidesSizesGrid","i","length","slidesPerGroupSkip","slidesPerGroup","increment","ratio","longSwipesMs","longSwipes","slideTo","activeIndex","longSwipesRatio","shortSwipes","isNavButtonTarget","navigation","target","nextEl","prevEl"],"mappings":"AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,uBAA9B;AACA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACxC,QAAMC,MAAM,GAAG,IAAf;AACA,QAAMC,IAAI,GAAGD,MAAM,CAACE,eAApB;AACA,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,YAAY,EAAEC,GAHV;AAIJC,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMFR,MANJ;AAOA,MAAI,CAACQ,OAAL,EAAc;AACd,MAAIC,CAAC,GAAGV,KAAR;AACA,MAAIU,CAAC,CAACC,aAAN,EAAqBD,CAAC,GAAGA,CAAC,CAACC,aAAN;;AAErB,MAAIT,IAAI,CAACU,mBAAT,EAA8B;AAC5BX,IAAAA,MAAM,CAACY,IAAP,CAAY,UAAZ,EAAwBH,CAAxB;AACD;;AAEDR,EAAAA,IAAI,CAACU,mBAAL,GAA2B,KAA3B;;AAEA,MAAI,CAACV,IAAI,CAACY,SAAV,EAAqB;AACnB,QAAIZ,IAAI,CAACa,OAAL,IAAgBX,MAAM,CAACY,UAA3B,EAAuC;AACrCf,MAAAA,MAAM,CAACgB,aAAP,CAAqB,KAArB;AACD;;AAEDf,IAAAA,IAAI,CAACa,OAAL,GAAe,KAAf;AACAb,IAAAA,IAAI,CAACgB,WAAL,GAAmB,KAAnB;AACA;AACD,GA5BuC,CA4BtC;;;AAGF,MAAId,MAAM,CAACY,UAAP,IAAqBd,IAAI,CAACa,OAA1B,IAAqCb,IAAI,CAACY,SAA1C,KAAwDb,MAAM,CAACkB,cAAP,KAA0B,IAA1B,IAAkClB,MAAM,CAACmB,cAAP,KAA0B,IAApH,CAAJ,EAA+H;AAC7HnB,IAAAA,MAAM,CAACgB,aAAP,CAAqB,KAArB;AACD,GAjCuC,CAiCtC;;;AAGF,QAAMI,YAAY,GAAGxB,GAAG,EAAxB;AACA,QAAMyB,QAAQ,GAAGD,YAAY,GAAGnB,IAAI,CAACqB,cAArC,CArCwC,CAqCa;;AAErD,MAAItB,MAAM,CAACuB,UAAX,EAAuB;AACrBvB,IAAAA,MAAM,CAACwB,kBAAP,CAA0Bf,CAA1B;AACAT,IAAAA,MAAM,CAACY,IAAP,CAAY,WAAZ,EAAyBH,CAAzB;;AAEA,QAAIY,QAAQ,GAAG,GAAX,IAAkBD,YAAY,GAAGnB,IAAI,CAACwB,aAApB,GAAoC,GAA1D,EAA+D;AAC7DzB,MAAAA,MAAM,CAACY,IAAP,CAAY,uBAAZ,EAAqCH,CAArC;AACD;AACF;;AAEDR,EAAAA,IAAI,CAACwB,aAAL,GAAqB7B,GAAG,EAAxB;AACAC,EAAAA,QAAQ,CAAC,MAAM;AACb,QAAI,CAACG,MAAM,CAAC0B,SAAZ,EAAuB1B,MAAM,CAACuB,UAAP,GAAoB,IAApB;AACxB,GAFO,CAAR;;AAIA,MAAI,CAACtB,IAAI,CAACY,SAAN,IAAmB,CAACZ,IAAI,CAACa,OAAzB,IAAoC,CAACd,MAAM,CAAC2B,cAA5C,IAA8DvB,OAAO,CAACwB,IAAR,KAAiB,CAA/E,IAAoF3B,IAAI,CAAC4B,gBAAL,KAA0B5B,IAAI,CAAC6B,cAAvH,EAAuI;AACrI7B,IAAAA,IAAI,CAACY,SAAL,GAAiB,KAAjB;AACAZ,IAAAA,IAAI,CAACa,OAAL,GAAe,KAAf;AACAb,IAAAA,IAAI,CAACgB,WAAL,GAAmB,KAAnB;AACA;AACD;;AAEDhB,EAAAA,IAAI,CAACY,SAAL,GAAiB,KAAjB;AACAZ,EAAAA,IAAI,CAACa,OAAL,GAAe,KAAf;AACAb,EAAAA,IAAI,CAACgB,WAAL,GAAmB,KAAnB;AACA,MAAIc,UAAJ;;AAEA,MAAI5B,MAAM,CAAC6B,YAAX,EAAyB;AACvBD,IAAAA,UAAU,GAAGzB,GAAG,GAAGN,MAAM,CAACiC,SAAV,GAAsB,CAACjC,MAAM,CAACiC,SAA9C;AACD,GAFD,MAEO;AACLF,IAAAA,UAAU,GAAG,CAAC9B,IAAI,CAAC4B,gBAAnB;AACD;;AAED,MAAI1B,MAAM,CAAC+B,OAAX,EAAoB;AAClB;AACD;;AAED,MAAIlC,MAAM,CAACG,MAAP,CAAcgC,QAAd,IAA0BhC,MAAM,CAACgC,QAAP,CAAgB3B,OAA9C,EAAuD;AACrDR,IAAAA,MAAM,CAACmC,QAAP,CAAgBrC,UAAhB,CAA2B;AACzBiC,MAAAA;AADyB,KAA3B;AAGA;AACD,GAhFuC,CAgFtC;;;AAGF,MAAIK,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAGrC,MAAM,CAACsC,eAAP,CAAuB,CAAvB,CAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,UAAU,CAACiC,MAA/B,EAAuCD,CAAC,IAAIA,CAAC,GAAGpC,MAAM,CAACsC,kBAAX,GAAgC,CAAhC,GAAoCtC,MAAM,CAACuC,cAAvF,EAAuG;AACrG,UAAMC,SAAS,GAAGJ,CAAC,GAAGpC,MAAM,CAACsC,kBAAP,GAA4B,CAAhC,GAAoC,CAApC,GAAwCtC,MAAM,CAACuC,cAAjE;;AAEA,QAAI,OAAOnC,UAAU,CAACgC,CAAC,GAAGI,SAAL,CAAjB,KAAqC,WAAzC,EAAsD;AACpD,UAAIZ,UAAU,IAAIxB,UAAU,CAACgC,CAAD,CAAxB,IAA+BR,UAAU,GAAGxB,UAAU,CAACgC,CAAC,GAAGI,SAAL,CAA1D,EAA2E;AACzEP,QAAAA,SAAS,GAAGG,CAAZ;AACAF,QAAAA,SAAS,GAAG9B,UAAU,CAACgC,CAAC,GAAGI,SAAL,CAAV,GAA4BpC,UAAU,CAACgC,CAAD,CAAlD;AACD;AACF,KALD,MAKO,IAAIR,UAAU,IAAIxB,UAAU,CAACgC,CAAD,CAA5B,EAAiC;AACtCH,MAAAA,SAAS,GAAGG,CAAZ;AACAF,MAAAA,SAAS,GAAG9B,UAAU,CAACA,UAAU,CAACiC,MAAX,GAAoB,CAArB,CAAV,GAAoCjC,UAAU,CAACA,UAAU,CAACiC,MAAX,GAAoB,CAArB,CAA1D;AACD;AACF,GAlGuC,CAkGtC;;;AAGF,QAAMI,KAAK,GAAG,CAACb,UAAU,GAAGxB,UAAU,CAAC6B,SAAD,CAAxB,IAAuCC,SAArD;AACA,QAAMM,SAAS,GAAGP,SAAS,GAAGjC,MAAM,CAACsC,kBAAP,GAA4B,CAAxC,GAA4C,CAA5C,GAAgDtC,MAAM,CAACuC,cAAzE;;AAEA,MAAIrB,QAAQ,GAAGlB,MAAM,CAAC0C,YAAtB,EAAoC;AAClC;AACA,QAAI,CAAC1C,MAAM,CAAC2C,UAAZ,EAAwB;AACtB9C,MAAAA,MAAM,CAAC+C,OAAP,CAAe/C,MAAM,CAACgD,WAAtB;AACA;AACD;;AAED,QAAIhD,MAAM,CAAC2B,cAAP,KAA0B,MAA9B,EAAsC;AACpC,UAAIiB,KAAK,IAAIzC,MAAM,CAAC8C,eAApB,EAAqCjD,MAAM,CAAC+C,OAAP,CAAeX,SAAS,GAAGO,SAA3B,EAArC,KAAgF3C,MAAM,CAAC+C,OAAP,CAAeX,SAAf;AACjF;;AAED,QAAIpC,MAAM,CAAC2B,cAAP,KAA0B,MAA9B,EAAsC;AACpC,UAAIiB,KAAK,GAAG,IAAIzC,MAAM,CAAC8C,eAAvB,EAAwCjD,MAAM,CAAC+C,OAAP,CAAeX,SAAS,GAAGO,SAA3B,EAAxC,KAAmF3C,MAAM,CAAC+C,OAAP,CAAeX,SAAf;AACpF;AACF,GAdD,MAcO;AACL;AACA,QAAI,CAACjC,MAAM,CAAC+C,WAAZ,EAAyB;AACvBlD,MAAAA,MAAM,CAAC+C,OAAP,CAAe/C,MAAM,CAACgD,WAAtB;AACA;AACD;;AAED,UAAMG,iBAAiB,GAAGnD,MAAM,CAACoD,UAAP,KAAsB3C,CAAC,CAAC4C,MAAF,KAAarD,MAAM,CAACoD,UAAP,CAAkBE,MAA/B,IAAyC7C,CAAC,CAAC4C,MAAF,KAAarD,MAAM,CAACoD,UAAP,CAAkBG,MAA9F,CAA1B;;AAEA,QAAI,CAACJ,iBAAL,EAAwB;AACtB,UAAInD,MAAM,CAAC2B,cAAP,KAA0B,MAA9B,EAAsC;AACpC3B,QAAAA,MAAM,CAAC+C,OAAP,CAAeX,SAAS,GAAGO,SAA3B;AACD;;AAED,UAAI3C,MAAM,CAAC2B,cAAP,KAA0B,MAA9B,EAAsC;AACpC3B,QAAAA,MAAM,CAAC+C,OAAP,CAAeX,SAAf;AACD;AACF,KARD,MAQO,IAAI3B,CAAC,CAAC4C,MAAF,KAAarD,MAAM,CAACoD,UAAP,CAAkBE,MAAnC,EAA2C;AAChDtD,MAAAA,MAAM,CAAC+C,OAAP,CAAeX,SAAS,GAAGO,SAA3B;AACD,KAFM,MAEA;AACL3C,MAAAA,MAAM,CAAC+C,OAAP,CAAeX,SAAf;AACD;AACF;AACF","sourcesContent":["import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n\n  data.allowTouchCallbacks = false;\n\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  } // Return Grab Cursor\n\n\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  } // Time diff\n\n\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click\n\n  if (swiper.allowClick) {\n    swiper.updateClickedSlide(e);\n    swiper.emit('tap click', e);\n\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  } // Find current slide\n\n\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  } // Find current slide size\n\n\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(stopIndex + increment);\n      }\n\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}